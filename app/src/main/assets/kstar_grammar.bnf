/* Kotlin Grammar-Kit BNF grammar for the custom language */

// Root rule
SOURCE ::= LIBS TOP_DECLARATIONS

LIBS ::= (IMPORT_STATEMENT)*
IMPORT_STATEMENT ::= 'import' IDENTIFIER ';'

TOP_DECLARATIONS ::= (DECLARATION | FUNCTION | CLASS)*

// Declarations
DECLARATION ::= CONSTANT | TYPE_DECL | VARIABLE_DECL

TYPE_DECL ::= 'type' IDENTIFIER ';'
            | 'type' IDENTIFIER '=' TYPE ';'

CONSTANT ::= 'const' TYPE IDENTIFIER '=' EXPRESSION ';'

VARIABLE_DECL ::= TYPE IDENTIFIER ('=' EXPRESSION)? ';'

// Function
FUNCTION ::= TYPE 'function' IDENTIFIER '(' PARAMETERS? ')' BLOCK

PARAMETERS ::= PARAMETER (',' PARAMETER)*
PARAMETER ::= TYPE IDENTIFIER

// Class
CLASS ::= 'class' IDENTIFIER CLASS_BLOCK
CLASS_BLOCK ::= '{' CLASS_MEMBER* '}'
CLASS_MEMBER ::= VARIABLE_DECL
              | FUNCTION

// Types
TYPE ::= PRIMITIVE_TYPE
      | IDENTIFIER
      | TYPE '[' ']'

PRIMITIVE_TYPE ::= 'int' | 'float' | 'bool' | 'string' | 'void'

// Statements and Blocks
BLOCK ::= '{' STATEMENT* '}'

STATEMENT ::= VARIABLE_DECL
           | ASSIGNMENT ';'
           | FUNCTION_CALL ';'
           | CONTROL_FLOW
           | RETURN_STATEMENT ';'
           | BLOCK

ASSIGNMENT ::= IDENTIFIER '=' EXPRESSION

RETURN_STATEMENT ::= 'return' EXPRESSION?

FUNCTION_CALL ::= IDENTIFIER '(' ARGUMENTS? ')'
ARGUMENTS ::= EXPRESSION (',' EXPRESSION)*

// Control flow
CONTROL_FLOW ::= IF_STATEMENT | WHILE_STATEMENT

IF_STATEMENT ::= 'if' '(' EXPRESSION ')' BLOCK ELSE_PART?
ELSE_PART ::= 'else' IF_STATEMENT
            | 'else' BLOCK

WHILE_STATEMENT ::= 'while' '(' EXPRESSION ')' BLOCK

// Expressions
EXPRESSION ::= LITERAL
            | IDENTIFIER
            | FUNCTION_CALL
            | UNARY_OP EXPRESSION
            | EXPRESSION BINARY_OP EXPRESSION
            | '(' EXPRESSION ')'

UNARY_OP ::= '-' | '!'
BINARY_OP ::= '+' | '-' | '*' | '/' | '%'
            | '==' | '!=' | '<' | '>' | '<=' | '>='
            | '&&' | '||'

// Literals
LITERAL ::= INTEGER | FLOAT | BOOLEAN | STRING | 'null'

// Tokens
INTEGER ::= /[0-9]+/
FLOAT ::= /[0-9]+\.[0-9]*/
BOOLEAN ::= 'true' | 'false'
STRING ::= '"' ( /[^"\n]/ | '\\"' )* '"'
IDENTIFIER ::= /[a-zA-Z_][a-zA-Z0-9_]*/
